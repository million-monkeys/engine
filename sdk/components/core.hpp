// Autogenerated, do not edit!
#pragma once
#include <million/types.hpp>

struct btRigidBody;

namespace components::core {

	// Provides a name by which to look this component up by in the scene
	struct Named {
		entt::hashed_string name;
	};

	// A tag which causes this entity to remain in the scene even when scenes are changed and it does NOT get reloaded if the original scene is loaded again
	struct Global {

	};

	struct Position {
		float x;
		float y;
		float z;
	};

	struct Transform {
		glm::vec3 rotation;
		glm::vec3 scale;
	};

	struct ScriptedBehavior {
		monkeys::resources::Handle resource;
	};

	namespace physics {

		// A static (immobile) physics object
		struct StaticBody {
			monkeys::resources::Handle shape;
			btRigidBody* physics_body;
		};

		// A physics object whose motion is dictated by the physics engine
		struct DynamicBody {
			monkeys::resources::Handle shape;
			float mass;
			btRigidBody* physics_body;
		};

		// A physics object whose motion is externally controlled
		struct KinematicBody {
			monkeys::resources::Handle shape;
			float mass;
			btRigidBody* physics_body;
		};

		// Entity sends signal when a physics body collides with it
		struct CollisionSensor {
			std::uint8_t collision_mask;
		};

		// A region which emits an event when a physics body enters or exits its area
		struct TriggerRegion {
			monkeys::resources::Handle shape;
			entt::hashed_string::hash_type on_enter;
			entt::hashed_string::hash_type on_exit;
			std::uint8_t trigger_mask;
		};

	} // physics

	namespace graphics {

		struct Layer {
			std::uint8_t layer;
		};

		// An image-based visual representation
		struct Sprite {

		};

		// A single image visual representation
		struct StaticImage {
			monkeys::resources::Handle image;
		};

		// Visual that is always oriented towards the camera
		struct Billboard {

		};

		// A 3D mesh-based visual representation
		struct Model {
			monkeys::resources::Handle mesh;
		};

		// A material with which to render a model
		struct Material {
			glm::vec3 color;
			monkeys::resources::Handle albedo;
			monkeys::resources::Handle normal;
			monkeys::resources::Handle metalic;
			monkeys::resources::Handle roughness;
			monkeys::resources::Handle ambient_occlusion;
		};

		// An emitter of light, in all directions
		struct PointLight {
			float radius;
			glm::vec3 color;
			float intensity;
		};

		// An emitter of light, in one direction
		struct SpotLight {
			float range;
			glm::vec3 color;
			glm::vec3 direction;
			float intensity;
		};

	} // graphics

} // components::core
